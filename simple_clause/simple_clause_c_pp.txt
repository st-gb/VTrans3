 /* bison /yacc-compatible grammar for creating a C++ -parser  */
     
     //Because the C++ skeleton changed several times, it is safer to require 
     //the version you designed the grammar for. 
     //%require "2.1a"
     %define "parser_class_name" "BisonEnglishParser"
     //%file-prefix=""
     //%b4_dir_prefix=""
     
     //Don't generate any #line preprocessor commands in the parser file. 
     //Ordinarily Bison writes these commands in the parser file so that the 
     //C compiler and debuggers will associate errors and object code with your
     //source file (the grammar file). This directive causes them to associate 
     //errors with the parser file, treating it an independent source file in 
     //its own right.
     %no-lines

     %{
       #include "../stdafx.h"
       #define YYSTYPE double
       //#include <stdio.h>
       //int yylex (void);
       #include "simple_clause_tokenizer.hpp"
       void yyerror (char const *);
       #include "simple_clause_c_pp.tab.hpp"
     %}
     
     /* Bison declarations.  */
     %token INDEFINITE_ARTICLE
     %token SINGULAR_NOUN
     %token PLURAL_NOUN
     %token VERB
     %token SEMICOLON
     %token CONJUNCTION
     /* %left '*' '/'
     %left NEG     // negation--unary minus 
     %right '^'    exponentiation */

     %glr-parser /* GLR-Parser kommen mit Mehrdeutigkeiten zurecht:
        gerade kein englischer Satz da, aber ein deutscher: "Mutter von 3 Kindern geschlagen":
        "Eine Mutter, die 3 Kinder hat, wurde geschlagen." -> "A mother of 3 children was hit." oder 
        "Eine Mutter WURDE von 3 Kindern geschlagen." -> "A mother was hit BY 3 children."
        */
     %skeleton "glr.cc" /*->generate a C++ parser */

     /* %skeleton "lalr1.cc" */ /*->generate a C++ parser */

     %defines /* benoetigt fuer C++ Parser */
     
     %% /* The grammar follows.  */
     
     /*$1 and $3 refer to the semantic values of the two component exp groupings,
which are the first and third symbols on the right hand side of the rule. The sum is stored
into $$ so that it becomes the semantic value of the addition-expression just recognized by
the rule. If there were a useful semantic value associated with the ‘+’ token, it could be
referred to as $2.*/
     /*exp:      NUM                { $$ = $1;         }
             | exp '+' exp        { $$ = $1 + $3;    }
             | exp '-' exp        { $$ = $1 - $3;    }
             | exp '*' exp        { $$ = $1 * $3;    }
             | exp '/' exp        { $$ = $1 / $3;    }
             | '-' exp  %prec NEG { $$ = -$2;        }
             | exp '^' exp        { $$ = pow ($1, $3); }
             | '(' exp ')'        { $$ = $2;         }
     ;*/
     
     sentence: //clause            { sentence.Addclause(clauseCurrent) ); }
               //clause_with_object { sentence.Addclause(clauseCurrent) ); }
               plural_noun
     ;
     
     /*sentence: clause
               | clause conjunction_before_clause
     
     //e.g. when the lights go down. conj: when
     conjunction_before_clause: conjunction clause
     ;
     */
     
     /*clause: //subject predicate 
             //| 
             clause_with_object
     ;*/
     
     /*clause_with_object: subject predicate object { 
              clauseCurrent.m_pSubject = pSubjectCurrent ;
              clauseCurrent.m_vecPredicate.push_back( predicateCurrent) ;
              clauseCurrent.m_pObjectFirst = pObjectFirstCurrent ; }
     
     subject:  enumeration_ele { subject.vecEnumEle.push_back(); }
             //| enumeration_ele CONJUNCTION enumeration_ele
     ;
     
     object:   enumeration_ele { subject.vecEnumEle.push_back(); }
             //| enumeration_ele CONJUNCTION enumeration_ele
     ;
     
     predicate: VERB
     ;
     
     enumeration_ele: //PLURAL_NOUN
              plural_noun
             //| INDEFINITE_ARTICLE singular_noun 
     ;
     */
     
     /*singular_noun: article SINGULAR_NOUN //{ enumele.push_back( 
                                    //enumeleCurrent.push_back( }                                    
     ;*/
     
     //evtl. Problem: Ein Plural kann identisch mit einem Singular sein ("a sheep, 2 sheep")
     plural_noun: PLURAL_NOUN { g_enumeleCurrent.push_back(englishnounrecordCurrent) ;  }
     ;
     /*conjunction: SEMICOLON
     ;
     
     */
     %%

     %{
       #define YYSTYPE double
       //#include <stdio.h>
       //int yylex (void);
       #include "simple_clause_tokenizer.hpp"
       void yyerror (char const *);
     %}
     
